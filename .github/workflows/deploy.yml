name: Deploy to VPS

on:
  push:
    branches: [ main ]
  workflow_dispatch:

jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout (for info only)
        uses: actions/checkout@v4

      - name: Deploy over SSH
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.VPS_HOST }}
          username: ${{ secrets.VPS_USER }}
          key: ${{ secrets.VPS_SSH_KEY }}
          script: |
            set -euo pipefail

            # --------------------------
            # Config from GitHub Secrets
            # --------------------------
            APP_DIR="${{ secrets.VPS_APP_PATH }}"
            SERVICE="${{ secrets.SERVICE_NAME }}"
            REPO_URL="https://github.com/${GITHUB_REPOSITORY}.git"
            COMMIT_SHA="${GITHUB_SHA}"

            # ---------------------------------------------
            # Helper: choose sudo flavor (password or -n)
            # ---------------------------------------------
            SUDO="sudo -n"
            if ! $SUDO true 2>/dev/null; then
              if [ -n "${{ secrets.SUDO_PASS }}" ]; then
                # shellcheck disable=SC2016
                SUDO='echo "${{ secrets.SUDO_PASS }}" | sudo -S'
                # verify the password works
                eval "$SUDO true" >/dev/null
              else
                echo "⚠️  sudo requires a password but SUDO_PASS is not set. Either:"
                echo "   • add SUDO_PASS secret (deploy user's sudo password), or"
                echo "   • set VPS_USER=root, or"
                echo "   • preinstall Node/PM2/git manually."
                exit 1
              fi
            fi

            # --------------------------
            # Ensure base packages exist
            # --------------------------
            if ! command -v git >/dev/null 2>&1; then
              eval "$SUDO apt-get update -y"
              eval "$SUDO apt-get install -y git"
            fi

            if ! command -v node >/dev/null 2>&1; then
              echo "Installing Node.js LTS…"
              curl -fsSL https://deb.nodesource.com/setup_lts.x | eval "$SUDO bash -"
              eval "$SUDO apt-get install -y nodejs build-essential"
              node -v && npm -v
            fi

            if ! command -v pm2 >/dev/null 2>&1; then
              echo "Installing PM2…"
              eval "$SUDO npm install -g pm2"
              # Make PM2 resurrect on reboot for this user
              pm2 startup systemd -u "$USER" --hp "$HOME" >/dev/null || true
              pm2 save || true
            fi

            # --------------------------
            # Prepare application folder
            # --------------------------
            mkdir -p "$APP_DIR"
            # Ensure current SSH user owns the app dir
            eval "$SUDO chown -R $USER:$USER \"$APP_DIR\""

            # --------------------------
            # Clone or update repository
            # --------------------------
            if [ ! -d "$APP_DIR/.git" ]; then
              echo "Cloning $REPO_URL into $APP_DIR"
              git clone "$REPO_URL" "$APP_DIR"
            fi

            cd "$APP_DIR"

            # Make sure the worktree matches the pushed commit
            git fetch --prune origin
            git checkout -B main origin/main
            git reset --hard "$COMMIT_SHA"

            # --------------------------
            # Install deps & Build
            # --------------------------
            if [ -f package-lock.json ]; then
              npm ci
            else
              npm install
            fi

            npm run build

            # --------------------------
            # (Re)start with PM2
            # --------------------------
            if pm2 describe "$SERVICE" >/dev/null 2>&1; then
              pm2 restart "$SERVICE"
            else
              # Start "npm start" as a managed process
              pm2 start npm --name "$SERVICE" -- start
            fi

            pm2 save

            # --------------------------
            # Reload nginx if present
            # --------------------------
            if command -v nginx >/dev/null 2>&1; then
              if eval "$SUDO nginx -t"; then
                eval "$SUDO systemctl reload nginx"
              else
                echo "⚠️  nginx config test failed; not reloading."
              fi
            else
              echo "ℹ️  nginx not installed; skipping reload."
            fi

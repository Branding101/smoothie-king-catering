name: Deploy to VPS

on:
  push:
    branches: [ main ]
  workflow_dispatch:

jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Deploy over SSH
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.VPS_HOST }}         # keep as secret
          username: ${{ secrets.VPS_USER }}     # keep as secret
          key: ${{ secrets.VPS_SSH_KEY }}       # keep as secret
          script: |
            echo "==> ðŸš€ Starting deploy on $(whoami)@$(hostname) at $(date)"
            set -euo pipefail

            # --- Hardcoded config (no repo secrets needed) ---
            APP_DIR="/var/www/smoothieking"
            SERVICE="smoothieking"
            REPO_URL="https://github.com/Branding101/smoothie-king-catering.git"
            NODE_VERSION_LTS_SETUP="https://deb.nodesource.com/setup_lts.x"

            echo "==> Using:"
            echo "    APP_DIR   = ${APP_DIR}"
            echo "    SERVICE   = ${SERVICE}"
            echo "    REPO_URL  = ${REPO_URL}"

            # --- Base packages ---
            echo "==> Ensure base packages"
            sudo apt-get update -y
            sudo apt-get install -y curl ca-certificates gnupg git build-essential nginx

            # --- Node/npm ---
            echo "==> Ensure Node.js LTS + npm"
            if ! command -v node >/dev/null 2>&1; then
              curl -fsSL ${NODE_VERSION_LTS_SETUP} | sudo -E bash -
              sudo apt-get install -y nodejs
            fi
            node -v
            npm -v

            # --- PM2 ---
            echo "==> Ensure PM2"
            if ! command -v pm2 >/dev/null 2>&1; then
              sudo npm i -g pm2
              sudo env PATH=$PATH:/usr/bin pm2 startup systemd -u ${USER} --hp ${HOME} >/dev/null 2>&1 || true
            fi
            pm2 -v

            # --- Prepare app directory ---
            echo "==> Create app dir & set ownership"
            sudo mkdir -p "${APP_DIR}"
            sudo chown -R "${USER}:${USER}" "${APP_DIR}"

            # --- Robust clone/backup logic ---
            echo "==> Fetch source code"
            if [ -d "${APP_DIR}/.git" ]; then
              echo "â€¢ Git repo exists. Fetching latest..."
              cd "${APP_DIR}"
              git fetch --prune origin
            elif [ -d "${APP_DIR}" ] && [ "$(ls -A "${APP_DIR}")" ]; then
              echo "â€¢ Directory exists but not a git repo. Backing up & cloning fresh..."
              ts=$(date +%s)
              sudo mv "${APP_DIR}" "${APP_DIR}.bak-${ts}"
              git clone "${REPO_URL}" "${APP_DIR}"
            else
              echo "â€¢ Directory empty or missing. Cloning fresh..."
              git clone "${REPO_URL}" "${APP_DIR}"
            fi

            # --- Checkout main ---
            echo "==> Checkout latest main"
            cd "${APP_DIR}"
            if git rev-parse --verify origin/main >/dev/null 2>&1; then
              git checkout -B main origin/main
            else
              git checkout -B main
              git pull --ff-only || true
            fi

            # --- Install dependencies ---
            echo "==> Install dependencies"
            if [ -f package-lock.json ]; then
              npm ci
            else
              npm install
            fi

            # --- Build app ---
            echo "==> Build application"
            npm run build

            # --- Run with PM2 ---
            echo "==> Start/Reload with PM2"
            if pm2 list | grep -q "${SERVICE}"; then
              pm2 reload "${SERVICE}"
            else
              # expects "start": "next start -p 3000" in package.json
              pm2 start npm --name "${SERVICE}" -- start
            fi
            pm2 save

            # --- Nginx sanity ---
            echo "==> Reload nginx if config valid"
            sudo nginx -t && sudo systemctl reload nginx || true

            echo "==> âœ… Deploy completed at $(date)"

